# multiAgents.py
# --------------
# Licensing Information:  You are free to use or extend these projects for
# educational purposes provided that (1) you do not distribute or publish
# solutions, (2) you retain this notice, and (3) you provide clear
# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and
# Pieter Abbeel (pabbeel@cs.berkeley.edu).


from util import manhattanDistance
from game import Directions
import random, util

from game import Agent
from pacman import GameState

class ReflexAgent(Agent):
    """
    A reflex agent chooses an action at each choice point by examining
    its alternatives via a state evaluation function.

    The code below is provided as a guide.  You are welcome to change
    it in any way you see fit, so long as you don't touch our method
    headers.
    """


    def getAction(self, gameState: GameState):
        """
        You do not need to change this method, but you're welcome to.

        getAction chooses among the best options according to the evaluation function.

        Just like in the previous project, getAction takes a GameState and returns
        some Directions.X for some X in the set {NORTH, SOUTH, WEST, EAST, STOP}
        """
        # Collect legal moves and successor states
        legalMoves = gameState.getLegalActions()

        # Choose one of the best actions
        scores = [self.evaluationFunction(gameState, action) for action in legalMoves]
        bestScore = max(scores)
        bestIndices = [index for index in range(len(scores)) if scores[index] == bestScore]
        chosenIndex = random.choice(bestIndices) # Pick randomly among the best

        "Add more of your code here if you want to"
        # print("getAction called")
        return legalMoves[chosenIndex]

    # What we evaluate is always the discrete (s, a) pair, not the process of moving
    def evaluationFunction(self, currentGameState: GameState, action):
        """
        Design a better evaluation function here.

        The evaluation function takes in the current and proposed successor
        GameStates (pacman.py) and returns a number, where higher numbers are better.

        The code below extracts some useful information from the state, like the
        remaining food (newFood) and Pacman position after moving (newPos).
        newScaredTimes holds the number of moves that each ghost will remain
        scared because of Pacman having eaten a power pellet.

        Print out these variables to see what you're getting, then combine them
        to create a masterful evaluation function.
        """
        # Useful information you can extract from a GameState (pacman.py)
        # The successor game states generated by all valid actions (provided)
        successorGameState = currentGameState.generatePacmanSuccessor(action) 
        # print(f"successorGameState: {successorGameState}")
        newPos = successorGameState.getPacmanPosition()
        # print(f"newPos: {newPos}")
        newFood = successorGameState.getFood()
        # print(f"newFood: {newFood}")
        newGhostStates = successorGameState.getGhostStates()
        # print(f"newGhostStates: {newGhostStates}")
        newScaredTimes = [ghostState.scaredTimer for ghostState in newGhostStates]
        # print(f"newScaredTimes: {newScaredTimes}")

        "*** YOUR CODE HERE ***"
        food_list = newFood.asList()
        score = successorGameState.getScore()
        # print(score)
        for food in food_list:
            score += 1.0 / (util.manhattanDistance(newPos, food) + 1)
        
        for ghost_pos in successorGameState.getGhostPositions():
            dist_to_ghost = manhattanDistance(newPos, ghost_pos)
            if dist_to_ghost < 2:
                score -= 200
            if newScaredTimes[0] > 0:
                score += 1.0 / (dist_to_ghost + 1) * 2
            else:
                score -= 1.0 / (dist_to_ghost + 1) * 2
        
            
        return score
        # return successorGameState.getScore(), this base score is provided to you orginally, use it !
    
def scoreEvaluationFunction(currentGameState: GameState):
    """
    This default evaluation function just returns the score of the state.
    The score is the same one displayed in the Pacman GUI.

    This evaluation function is meant for use with adversarial search agents
    (not reflex agents).
    """
    return currentGameState.getScore()

class MultiAgentSearchAgent(Agent):
    """
    This class provides some common elements to all of your
    multi-agent searchers.  Any methods defined here will be available
    to the MinimaxPacmanAgent, AlphaBetaPacmanAgent & ExpectimaxPacmanAgent.

    You *do not* need to make any changes here, but you can if you want to
    add functionality to all your adversarial search agents.  Please do not
    remove anything, however.

    Note: this is an abstract class: one that should not be instantiated.  It's
    only partially specified, and designed to be extended.  Agent (game.py)
    is another abstract class.
    """

    def __init__(self, evalFn = 'scoreEvaluationFunction', depth = '2'):
        self.index = 0 # Pacman is always agent index 0
        self.evaluationFunction = util.lookup(evalFn, globals())
        self.depth = int(depth)

class MinimaxAgent(MultiAgentSearchAgent):
    """
    Your minimax agent (question 2)
    """

    def getAction(self, gameState: GameState):
        """
        Returns the minimax action from the current gameState using self.depth
        and self.evaluationFunction.

        Here are some method calls that might be useful when implementing minimax.

        gameState.getLegalActions(agentIndex):
        Returns a list of legal actions for an agent
        agentIndex=0 means Pacman, ghosts are >= 1

        gameState.generateSuccessor(agentIndex, action):
        Returns the successor game state after an agent takes an action

        gameState.getNumAgents():
        Returns the total number of agents in the game

        gameState.isWin():
        Returns whether or not the game state is a winning state

        gameState.isLose():
        Returns whether or not the game state is a losing state
        """
        "*** YOUR CODE HERE ***"
        '''
        1. Use the current game state, number of agents, current depth to make the recursion call 
        2. The recursion call takes above as input, and return minmax score as output
        3. The getAction use the scores to get the best action, and decrease the depth needs to search by 1
        '''
        minmax_value, minmax_index = self.expand_all_depth(gameState, 0, 1)
        return gameState.getLegalActions()[minmax_index]
        
        
    def expand_all_depth(self, game_state: GameState, agent_index: int, curr_depth: int):
        '''
        1. Base case: Excceed the appointed depth, evalute the state and return
        2. Recursion: 
        2.1 Iterate through all moves, and for each move, generate the success state, and 
            iterate the next agent.
        2.2 If all agents in curr depth have moved, go to the next depth
        3. Let me first implement the value, then go back to consider the action

        Return the minmax value of this state
        '''
        # Base case
        if (curr_depth > self.depth) or game_state.isWin() or game_state.isLose():
            return self.evaluationFunction(game_state), 0
        
        valid_moves = game_state.getLegalActions(agent_index)

        succ_game_states = [game_state.generateSuccessor(agent_index, action) for action in valid_moves]
        succ_state_values = []
        next_agent_index = (agent_index + 1) % game_state.getNumAgents()
        for succ_gs in succ_game_states:
            value, index = self.expand_all_depth(succ_gs, next_agent_index, curr_depth+(next_agent_index==0))
            succ_state_values += [value]

        # print(succ_state_values)
        if agent_index == 0:
            return max(succ_state_values), succ_state_values.index(max(succ_state_values))
        else:
            return min(succ_state_values), succ_state_values.index(min(succ_state_values))
            

class AlphaBetaAgent(MultiAgentSearchAgent):
    """
    Your minimax agent with alpha-beta pruning (question 3)
    """

    def getAction(self, gameState: GameState):
        """
        Returns the minimax action using self.depth and self.evaluationFunction
        """
        "*** YOUR CODE HERE ***"
        def max_value(state: GameState, agent_index, level, alpha, beta):
            v = float('-inf')

            for action in state.getLegalActions(agent_index):
                # Put generateSuccessor in the loop may lead to fewer calls
                # The autograder use this version
                # So the method of generating all the successors before
                # and then use them one by one gets the wrong number of 
                # states expanding calls
                v = max(v, get_value(
                    state.generateSuccessor(agent_index, action),
                    agent_index + 1,
                    level + 1,
                    alpha, 
                    beta
                ))
                if v > beta: 
                    return v
                alpha = max(alpha, v)
            return v

        def min_value(state: GameState, agent_index, level, alpha, beta):
            v = float('inf')

            for action in state.getLegalActions(agent_index):
                v = min(v, get_value(
                    state.generateSuccessor(agent_index, action),
                    agent_index + 1,
                    level + 1,
                    alpha, 
                    beta
                ))
                if v < alpha: return v
                beta = min(beta, v)
            return v

        def get_value(state: GameState, agent_index: int, level: int, alpha: int, beta: int):
            agent_index = agent_index % state.getNumAgents()
            if level == self.depth * state.getNumAgents() or state.isWin() or state.isLose():
                return self.evaluationFunction(state)

            if agent_index == 0:
                return max_value(state, agent_index, level, alpha, beta)
            else:
                return min_value(state, agent_index, level, alpha, beta)
            
        valid_moves = gameState.getLegalActions(0)
        alpha = float('-inf')
        beta = float('inf')
        best_score = float('-inf')
        best_action = None
        
        for action in valid_moves:
            succ = gameState.generateSuccessor(0, action)
            score = get_value(
                succ,
                1, 
                1,
                alpha,
                beta
            )
            if score > best_score:
                best_score = score
                best_action = action
                # Same struecture as alpha-beta pruning
                # But useless in fact, because beta if +inf and won't be affect by get_value
                # This is natural since in this level there must be no adversary
                # So Pacman can choose its optimal successor
                if best_score > beta:
                    return best_action
            alpha = max(alpha, best_score)
        return best_action


class ExpectimaxAgent(MultiAgentSearchAgent):
    """
      Your expectimax agent (question 4)
    """

    def getAction(self, gameState: GameState):
        """
        Returns the expectimax action using self.depth and self.evaluationFunction

        All ghosts should be modeled as choosing uniformly at random from their
        legal moves.
        """
        "*** YOUR CODE HERE ***"
        def get_value(state: GameState, agi: int, lev: int):
            '''
            Get the value base on expectimax algorithm.
            The Pacman will get max, while ghosts act randomly.
            state: gamestate
            agi: agent_index, refer to the agent we need to get value, 0 for Pacman
            lev: level of current depth. We measure depth as numOfAgents * depth
            '''
            agi = agi % state.getNumAgents()
            if lev == self.depth * state.getNumAgents() or state.isWin() or state.isLose():
                return self.evaluationFunction(state)
            if agi == 0:
                return max_value(state, agi, lev)
            else:
                return expect_value(state, agi, lev)
        
        def max_value(state: GameState, agi: int, lev: int):
            '''
            The Pacman use this method to select from its max value succssor.
            '''
            v = float('-inf')
            for action in state.getLegalActions(agi):
                v = max(v, get_value(
                    state.generateSuccessor(agi, action),
                    agi + 1,
                    lev + 1
                ))
            return v
        
        def expect_value(state: GameState, agi: int, lev: int):
            '''
            The ghosts select randomly from all their successors.
            Our expected value computation is based on this assumption.
            '''
            v = 0
            legal_actions = state.getLegalActions(agi)
            p = 1.0 / len(legal_actions)
            for action in legal_actions:
                v += p * get_value(
                    state.generateSuccessor(agi, action),
                    agi + 1,
                    lev + 1
                )
            return v
        
        legal_actions = gameState.getLegalActions()
        scores = [get_value(gameState.generateSuccessor(0, action), 1, 1) for action in legal_actions]
        best_score = max(scores)
        best_indices = [idx for idx in range(len(scores)) if scores[idx] == best_score] 
        chosen_index = random.choice(best_indices)
        return legal_actions[chosen_index]
            
        
        

        
def betterEvaluationFunction(currentGameState: GameState):
    """
    Your extreme ghost-hunting, pellet-nabbing, food-gobbling, unstoppable
    evaluation function (question 5).

    DESCRIPTION: <write something here so we know what you did>
    """
    "*** YOUR CODE HERE ***"
    pacman_pos = currentGameState.getPacmanPosition()
    score = currentGameState.getScore()
    food_list = currentGameState.getFood().asList()
    for food in food_list:
        score += 1.0 / (manhattanDistance(pacman_pos, food) + 1)
    
    ghosts_poss = currentGameState.getGhostPositions()
    ghosts_states = currentGameState.getGhostStates()
    ghosts_scared_timers = [ghost_state.scaredTimer for ghost_state in ghosts_states]
    for i, ghost in enumerate(ghosts_poss):
        dist_to_ghost = manhattanDistance(pacman_pos, ghost)
        if ghosts_scared_timers[i] > 0:
            score += 5 * (1.0 / (dist_to_ghost + 1))
        else:
            score -= 2 * (1.0 / (dist_to_ghost + 1))
        if dist_to_ghost < 2:
            score -= 20
    return score
    

# Abbreviation
better = betterEvaluationFunction
